{"version":3,"sources":["Questions/AvailableQuestions.ts","Views/Home.tsx","Questions/Question5.ts","Input/Parser.ts","Questions/Question1.ts","Questions/Question3.ts","Questions/Question4.ts","Questions/Question6.ts","Questions/Solver.ts","Questions/Solvers.ts","Questions/Question2.ts","Views/Question.tsx","App.tsx","reportWebVitals.ts","i18n.ts","index.tsx"],"names":["AvailableQuestions","Home","questions","t","useTranslation","h","w","listStyleType","margin","map","_question","index","textAlign","as","RouterLink","to","color","Point","x","y","this","toString","point","X","Y","Math","abs","Line","points","VentsLocation","maxX","maxY","ventsCount","initializeVentsGrid","line","Points","forEach","StringToArrayParser","separator","input","split","filter","value","StringToNumericArrayParser","StringToKeyNumberTupleParser","subArray","StringToBingoCardsParser","splitInput","numbers","cards","i","length","createCard","cardNumber","lines","card","val","marked","StringToPointsArray","pointsSeparator","pointsValueSeparator","pointsInLine","pointInputs","pointsArray","getPointsBetween","pointA","pointB","minY","min","max","push","minX","isDiagonal","difference","sub","directionX","directionY","currentIndex","subResult","countDepthIncreases","inputs","increasesCount","binaryStringToNumber","binaryString","parseInt","getGammaRate","binaryLength","valuesCount","j","getValuesCount","gammaRate","getEpsilonRate","epsilonRate","getMostCommonValue","position","currentFilteredValue","getValuesCountAtPosition","getScore","sum","validateCard","markedByRow","markedByColumn","some","countLanternfishAfterDays","days","timerNewFish","timerFishAfterDuplicate","timers","day","timersEnding","reduce","acc","curr","Solver","inputParser","runner","args","parse","stringToArrayParser","stringToNumericArrayParser","stringToTupleArray","stringToBingoCardsParser","stringToPointsArray","Solvers","slidingWindowMeasurement","slidingWindowSums","maxIndex","horizontalPosition","depth","aim","currentInputs","currentPosition","mostCommonValue","constCurrentPosition","getOxygenGeneratorRating","getCO2ScrubberRating","spots","draw","values","drawValue","cardValue","extractValues","cardsWon","curSpots","won","drawUntilLastWinner","ventsLocation","addLine","pointsOverlapping","VentsCount","Question","params","useParams","navigate","useNavigate","useState","test","setTest","selectedSolver","setSelectedSolver","solvers","setSolvers","setInput","output","setOutput","useEffect","id","fetch","then","response","text","includes","alignItems","height","target","href","flex","justifyContent","spacing","borderWidth","borderRadius","whiteSpace","overflow","flexGrow","padding","justifyItems","onChange","event","preventDefault","width","alignContent","_solver","onClick","solve","placeholder","App","centerContent","element","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","resources","en","main","i18n","use","initReactI18next","init","lng","ns","fallbackLng","default","debug","defaultNS","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b1b93b86.chunk.js","sourcesContent":["export const AvailableQuestions = [1, 2, 3, 6];\n","import { Center, Link, ListItem, UnorderedList } from '@chakra-ui/react';\nimport { useTranslation } from 'react-i18next';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { AvailableQuestions } from '../Questions/AvailableQuestions';\n\nfunction Home() {\n  const questions = AvailableQuestions;\n  const { t } = useTranslation();\n\n  return (\n    <Center h=\"full\" w=\"full\">\n      <UnorderedList listStyleType=\"none\" margin=\"0\">\n        {questions.map((_question, index) => (\n          <ListItem key={_question} textAlign=\"left\">\n            <Link\n              as={RouterLink}\n              to={`/question/${_question}`}\n              color=\"teal.500\"\n            >\n              {_question} : {t(`questions.${_question}.title`)}\n            </Link>\n          </ListItem>\n        ))}\n      </UnorderedList>\n    </Center>\n  );\n}\n\nexport default Home;\n","export function getOverlappingPoints(lines: Line[]): string {\n  const points = lines\n    .map((line) => line.Points)\n    .reduce((acc, curr) => {\n      acc.push(...curr);\n      return acc;\n    }, []);\n  const maxX = Math.max(...points.map((point) => point.X));\n  const maxY = Math.max(...points.map((point) => point.Y));\n  const ventsLocation: VentsLocation = new VentsLocation(maxX, maxY);\n  lines.forEach((line) => ventsLocation.addLine(line));\n  let pointsOverlapping = 0;\n  for (let x = 0; x < ventsLocation.VentsCount.length; x++) {\n    for (let y = 0; y < ventsLocation.VentsCount[x].length; y++) {\n      if (ventsLocation.VentsCount[x][y] > 1) {\n        pointsOverlapping += 1;\n      }\n    }\n  }\n  return pointsOverlapping.toString();\n}\n\nexport class Point {\n  constructor(private x: number, private y: number) {}\n\n  public get X() {\n    return this.x;\n  }\n\n  public get Y() {\n    return this.y;\n  }\n\n  public toString(): string {\n    return `${this.x.toString()},${this.y.toString()}`;\n  }\n\n  public sub(point: Point) {\n    return new Point(this.x - point.X, this.y - point.Y);\n  }\n\n  public abs() {\n    return new Point(Math.abs(this.x), Math.abs(this.y));\n  }\n}\n\nexport class Line {\n  constructor(private points: Point[]) {}\n\n  public get Points(): Point[] {\n    return this.points;\n  }\n}\n\nexport class VentsLocation {\n  private ventsCount: number[][] = [];\n\n  public get VentsCount(): number[][] {\n    return this.ventsCount;\n  }\n\n  constructor(maxX: number, maxY: number) {\n    this.initializeVentsGrid(maxX, maxY);\n  }\n\n  private initializeVentsGrid(maxX: number, maxY: number) {\n    for (let x = 0; x <= maxX; x++) {\n      this.ventsCount[x] = [];\n      for (let y = 0; y <= maxY; y++) {\n        this.ventsCount[x][y] = 0;\n      }\n    }\n  }\n\n  public addLine(line: Line) {\n    line.Points.forEach(\n      (point: Point) => (this.ventsCount[point.X][point.Y] += 1)\n    );\n  }\n}\n","import { BingoCard, BingoSpot } from '../Questions/Question4';\nimport { Line, Point } from '../Questions/Question5';\n\nexport interface InputParser<T> {\n  parse(input: string): T;\n}\n\nexport class StringToArrayParser implements InputParser<string[]> {\n  private separator: string;\n\n  constructor(separator: string = '\\n') {\n    this.separator = separator;\n  }\n\n  parse(input: string): string[] {\n    return input.split(this.separator).filter((value) => value !== '');\n  }\n}\n\nexport class StringToNumericArrayParser implements InputParser<number[]> {\n  private separator: string;\n\n  constructor(separator: string = '\\n') {\n    this.separator = separator;\n  }\n\n  parse(input: string): number[] {\n    return input\n      .split(this.separator)\n      .filter((value) => value !== '')\n      .map((value) => +value);\n  }\n}\n\nexport class StringToKeyNumberTupleParser\n  implements InputParser<[string, number][]>\n{\n  private separator: string;\n\n  constructor(separator: string = '\\n') {\n    this.separator = separator;\n  }\n  parse(input: string): [string, number][] {\n    return input\n      .split(this.separator)\n      .filter((value) => value !== '')\n      .map((value) => {\n        const subArray = value.split(' ');\n        let inputs: [string, number] = [subArray[0], +subArray[1]];\n        return inputs;\n      });\n  }\n}\n\nexport class StringToBingoCardsParser\n  implements InputParser<[number[], BingoCard[]]>\n{\n  private separator: string;\n\n  constructor(separator: string = '\\n') {\n    this.separator = separator;\n  }\n  parse(input: string): [number[], BingoCard[]] {\n    const splitInput = input.split('\\n\\n');\n    const numbers = input\n      .split('\\n')[0]\n      .split(',')\n      .map((value) => +value);\n\n    let cards: BingoCard[] = [];\n    for (let i = 1; i < splitInput.length; i++) {\n      cards[i - 1] = createCard(splitInput[i], i);\n    }\n    return [numbers, cards];\n  }\n}\n\nfunction createCard(input: string, cardNumber: number): BingoCard {\n  const lines = input.split('\\n');\n  const card: BingoSpot[][] = [];\n  for (let i = 0; i < lines.length; i++) {\n    card[i] = lines[i]\n      .split(' ')\n      .filter((val) => val !== '')\n      .map((value) => {\n        return {\n          value: +value,\n          marked: false,\n          cardNumber: cardNumber,\n        } as BingoSpot;\n      });\n  }\n  return { value: card } as BingoCard;\n}\n\nexport class StringToPointsArray implements InputParser<Line[]> {\n  constructor(\n    private pointsSeparator: string = ' -> ',\n    private pointsValueSeparator: string = ','\n  ) {}\n  parse(input: string): Line[] {\n    const lines = input.split('\\n').filter((line) => line !== '');\n    const pointsInput = lines.map((line) => {\n      const pointsInLine = line\n        .split(this.pointsSeparator)\n        .map((pointInputs) => {\n          const pointsArray = pointInputs.split(this.pointsValueSeparator);\n          return new Point(+pointsArray[0], +pointsArray[1]);\n        });\n      return new Line(this.getPointsBetween(pointsInLine[0], pointsInLine[1]));\n    });\n    return pointsInput;\n  }\n\n  private getPointsBetween(pointA: Point, pointB: Point): Point[] {\n    let points: Point[] = [];\n    if (pointA.X === pointB.X) {\n      const x = pointA.X;\n      const minY = Math.min(pointA.Y, pointB.Y);\n      const maxY = Math.max(pointA.Y, pointB.Y);\n      for (let y = minY; y <= maxY; y++) {\n        points.push(new Point(x, y));\n      }\n    }\n    if (pointA.Y === pointB.Y) {\n      const y = pointA.Y;\n      const minX = Math.min(pointA.X, pointB.X);\n      const maxX = Math.max(pointA.X, pointB.X);\n      for (let x = minX; x <= maxX; x++) {\n        points.push(new Point(x, y));\n      }\n    }\n    if (this.isDiagonal(pointA, pointB)) {\n      const difference = pointA.sub(pointB);\n      const directionX = difference.X / Math.abs(difference.X);\n      const directionY = difference.Y / Math.abs(difference.Y);\n      const currentIndex = [pointA.X, pointA.Y];\n\n      while (currentIndex[0] !== pointB.X && currentIndex[1] !== pointB.Y) {\n        points.push(new Point(currentIndex[0], currentIndex[1]));\n        currentIndex[0] -= directionX;\n        currentIndex[1] -= directionY;\n      }\n      points.push(pointB);\n    }\n\n    return points;\n  }\n\n  private isDiagonal(pointA: Point, pointB: Point): boolean {\n    const subResult = pointA.sub(pointB).abs();\n    return subResult.X === subResult.Y;\n  }\n}\n","export function countDepthIncreases(inputs: Array<number>): string {\n  let increasesCount = 0;\n  for (let i = 1; i < inputs.length; i++) {\n    if (inputs[i] > inputs[i - 1]) {\n      increasesCount += 1;\n    }\n  }\n  return increasesCount.toString();\n}\n\nexport function countSlidingWindowDepthIncreases(\n  inputs: Array<number>,\n  slidingWindowMeasurement: number = 3\n): string {\n  let slidingWindowSums: Array<number> = [];\n  const maxIndex = inputs.length - (slidingWindowMeasurement - 1);\n  for (let i = 0; i <= maxIndex; i++) {\n    let value = 0;\n    for (let j = i; j < slidingWindowMeasurement + i; j++) {\n      value += inputs[j];\n    }\n    slidingWindowSums.push(value);\n  }\n  return countDepthIncreases(slidingWindowSums).toString();\n}\n","export function getPowerConsumption(\n  input: string[],\n  binaryLength: number = 12\n): string {\n  const gammaRate = getGammaRate(input, binaryLength);\n  const epsilonRate = getEpsilonRate(gammaRate);\n  return (\n    binaryStringToNumber(gammaRate) * binaryStringToNumber(epsilonRate)\n  ).toString();\n}\n\nexport function getLifeSupportRating(input: string[]): string {\n  return (\n    binaryStringToNumber(getOxygenGeneratorRating(input)) *\n    binaryStringToNumber(getCO2ScrubberRating(input))\n  ).toString();\n}\n\nfunction binaryStringToNumber(binaryString: string): number {\n  return parseInt(binaryString, 2);\n}\n\nfunction getGammaRate(input: string[], binaryLength: number): string {\n  let valuesCount = getValuesCount(input, binaryLength);\n  let gammaRate: string = '';\n  for (let i = 0; i < valuesCount.length; i++) {\n    if (valuesCount[i] > input.length / 2) {\n      gammaRate += '1';\n    } else {\n      gammaRate += '0';\n    }\n  }\n  return gammaRate.toString();\n}\n\nfunction getValuesCountAtPosition(input: string[], position: number): number {\n  let valuesCount: number = 0;\n  for (let i = 0; i < input.length; i++) {\n    valuesCount += +input[i][position];\n  }\n  return valuesCount;\n}\n\nfunction getValuesCount(input: string[], binaryLength: number): number[] {\n  let valuesCount: number[] = [];\n  for (let i = 0; i < binaryLength; i++) {\n    valuesCount[i] = 0;\n  }\n  for (let i = 0; i < input.length; i++) {\n    for (let j = 0; j < binaryLength; j++) {\n      valuesCount[j] += +input[i][j];\n    }\n  }\n  return valuesCount;\n}\nfunction getEpsilonRate(gammaRate: string): string {\n  let epsilonRate: string = ' ';\n  for (let i = 0; i < gammaRate.length; i++) {\n    if (gammaRate[i] === '0') {\n      epsilonRate += '1';\n    } else {\n      epsilonRate += '0';\n    }\n  }\n  return epsilonRate;\n}\n\nfunction getOxygenGeneratorRating(inputs: string[]): string {\n  let currentInputs: string[] = inputs;\n  let currentPosition: number = 0;\n  while (currentInputs.length > 1) {\n    const mostCommonValue = getMostCommonValue(currentInputs, currentPosition);\n    const constCurrentPosition = currentPosition;\n    currentInputs = currentInputs.filter(\n      (value) => value[constCurrentPosition] === mostCommonValue\n    );\n    currentPosition += 1;\n  }\n  return currentInputs[0];\n}\n\nfunction getCO2ScrubberRating(inputs: string[]): string {\n  let currentInputs: string[] = inputs;\n  let currentPosition: number = 0;\n  while (currentInputs.length > 1) {\n    const mostCommonValue = getMostCommonValue(currentInputs, currentPosition);\n    const constCurrentPosition = currentPosition;\n    currentInputs = currentInputs.filter(\n      (value) => value[constCurrentPosition] !== mostCommonValue\n    );\n    currentPosition += 1;\n  }\n  return currentInputs[0];\n}\n\nfunction getMostCommonValue(inputs: string[], position: number): string {\n  const valuesCountAtCurrentPosition: number = getValuesCountAtPosition(\n    inputs,\n    position\n  );\n  let currentFilteredValue: string = '0';\n  if (valuesCountAtCurrentPosition >= inputs.length / 2) {\n    currentFilteredValue = '1';\n  }\n  return currentFilteredValue;\n}\n","export function getFinalScore(input: [number[], BingoCard[]]): string {\n  const card = drawUntilLastWinner(input);\n  if (!card) {\n    return '0';\n  }\n\n  return card[1].toString();\n}\n\nfunction getScore(value: number, card: BingoCard): number {\n  let sum = 0;\n  for (let i = 0; i < card.value[0].length; i++) {\n    for (let j = 0; j < card.value[i].length; j++) {\n      if (!card.value[i][j].marked) {\n        sum += card.value[i][j].value;\n      }\n    }\n  }\n  return sum * value;\n}\n\n// function draw(input: [number[], BingoCard[]]): [BingoCard, number] | undefined {\n//   const spots = extractValues(input[0], input[1]);\n//   for (let i = 0; i < input[0].length; i++) {\n//     const curSpots = spots[input[0][i]];\n//     for (let j = 0; j < curSpots.length; j++) {\n//       curSpots[j].marked = true;\n//       const card = input[1][curSpots[j].cardNumber - 1];\n//       if (validateCard(card)) {\n//         return [card, getScore(input[0][i], card)];\n//       }\n//     }\n//   }\n//   return undefined;\n// }\n\nfunction extractValues(\n  draw: number[],\n  input: BingoCard[]\n): { [name: string]: BingoSpot[] } {\n  let values: { [name: string]: BingoSpot[] } = {};\n  draw.forEach((drawValue) => {\n    values[drawValue] = [];\n  });\n  input.forEach((card) => {\n    for (let i = 0; i < card.value.length; i++) {\n      for (let j = 0; j < card.value[i].length; j++) {\n        const cardValue = card.value[i][j];\n        if (!values[cardValue.value]) {\n          values[cardValue.value] = [];\n        }\n        values[cardValue.value].push(cardValue);\n      }\n    }\n  });\n  return values;\n}\n\nfunction validateCard(card: BingoCard): boolean {\n  let markedByRow = [0, 0, 0, 0, 0];\n  let markedByColumn = [0, 0, 0, 0, 0];\n  for (let i = 0; i < card.value[0].length; i++) {\n    for (let j = 0; j < card.value[i].length; j++) {\n      if (card.value[i][j].marked) {\n        markedByRow[i] += 1;\n        markedByColumn[j] += 1;\n      }\n      if (\n        markedByColumn.some((val) => val === 5) ||\n        markedByRow.some((val) => val === 5)\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\nfunction drawUntilLastWinner(\n  input: [number[], BingoCard[]]\n): [BingoCard, number] | undefined {\n  const spots = extractValues(input[0], input[1]);\n  let cardsWon: [BingoCard, number][] = [];\n  for (let i = 0; i < input[0].length; i++) {\n    const curSpots = spots[input[0][i]];\n    for (let j = 0; j < curSpots.length; j++) {\n      curSpots[j].marked = true;\n      const card = input[1][curSpots[j].cardNumber - 1];\n      if (!cardsWon.some((won) => won[0] === card)) {\n        if (validateCard(card)) {\n          cardsWon.push([card, getScore(input[0][i], card)]);\n        }\n      }\n    }\n  }\n  return cardsWon[cardsWon.length - 1];\n}\n\nexport type BingoCard = {\n  value: BingoSpot[][];\n};\n\nexport type BingoSpot = {\n  value: number;\n  marked: boolean;\n  cardNumber: number;\n  position: [number, number];\n};\n","export function countLanternfishAfterDays(\n  input: number[],\n  days: number = 256,\n  timerNewFish = 8,\n  timerFishAfterDuplicate = 6\n): string {\n  let timers: number[] = [];\n  for (let i = 0; i <= timerNewFish; i++) {\n    timers[i] = 0;\n  }\n  for (let i = 0; i < input.length; i++) {\n    timers[input[i]]++;\n  }\n  for (let day = 0; day < days; day++) {\n    const timersEnding = timers[0];\n    for (let i = 1; i <= timerNewFish; i++) {\n      timers[i - 1] = timers[i];\n    }\n    timers[timerNewFish] = timersEnding;\n    timers[timerFishAfterDuplicate] += timersEnding;\n  }\n\n  return timers.reduce((acc, curr) => curr + acc, 0).toString();\n}\n","import { InputParser } from '../Input/Parser';\n\nexport default class Solver<I> {\n  private inputParser: InputParser<I>;\n  private runner: (value: I, ...args: any[]) => string;\n  private args: any[];\n  constructor(\n    inputParser: InputParser<I>,\n    runner: (value: I, ...args: any[]) => string,\n    ...args: any[]\n  ) {\n    this.inputParser = inputParser;\n    this.runner = runner;\n    this.args = args;\n  }\n\n  public solve(input: string): string {\n    return this.runner(this.inputParser.parse(input), ...this.args);\n  }\n}\n","import {\n  StringToArrayParser,\n  StringToBingoCardsParser,\n  StringToKeyNumberTupleParser,\n  StringToNumericArrayParser,\n  StringToPointsArray,\n} from '../Input/Parser';\nimport {\n  countDepthIncreases,\n  countSlidingWindowDepthIncreases,\n} from './Question1';\n\nimport {\n  getDepthMultipliedByHorizontalPosition,\n  getDepthMultipliedByHorizontalPositionWithAim,\n} from './Question2';\nimport { getLifeSupportRating, getPowerConsumption } from './Question3';\nimport { getFinalScore } from './Question4';\nimport { getOverlappingPoints } from './Question5';\nimport { countLanternfishAfterDays } from './Question6';\nimport Solver from './Solver';\n\nconst stringToArrayParser = new StringToArrayParser();\nconst stringToNumericArrayParser = new StringToNumericArrayParser();\nconst stringToTupleArray = new StringToKeyNumberTupleParser();\nconst stringToBingoCardsParser = new StringToBingoCardsParser();\nconst stringToPointsArray = new StringToPointsArray();\nexport const Solvers: { [key: string]: Solver<any>[] } = {\n  '1': [\n    new Solver(stringToNumericArrayParser, countDepthIncreases),\n    new Solver(stringToNumericArrayParser, countSlidingWindowDepthIncreases),\n  ],\n  '2': [\n    new Solver(stringToTupleArray, getDepthMultipliedByHorizontalPosition),\n    new Solver(\n      stringToTupleArray,\n      getDepthMultipliedByHorizontalPositionWithAim\n    ),\n  ],\n  '3': [\n    new Solver(stringToArrayParser, getPowerConsumption),\n    new Solver(stringToArrayParser, getLifeSupportRating),\n  ],\n  '4': [new Solver(stringToBingoCardsParser, getFinalScore)],\n  '5': [new Solver(stringToPointsArray, getOverlappingPoints)],\n  '6': [\n    new Solver(\n      new StringToNumericArrayParser(','),\n      countLanternfishAfterDays,\n      80\n    ),\n    new Solver(\n      new StringToNumericArrayParser(','),\n      countLanternfishAfterDays,\n      256\n    ),\n  ],\n};\n","export function getDepthMultipliedByHorizontalPosition(\n  inputs: Array<[string, number]>\n): string {\n  let horizontalPosition = 0;\n  let depth = 0;\n  for (let i = 0; i < inputs.length; i++) {\n    switch (inputs[i][0]) {\n      case 'forward':\n        horizontalPosition += inputs[i][1];\n        break;\n      case 'down':\n        depth += inputs[i][1];\n        break;\n      case 'up':\n        depth -= inputs[i][1];\n        break;\n    }\n  }\n  return (horizontalPosition * depth).toString();\n}\n\nexport function getDepthMultipliedByHorizontalPositionWithAim(\n  inputs: Array<[string, number]>\n): string {\n  let horizontalPosition = 0;\n  let depth = 0;\n  let aim = 0;\n  for (let i = 0; i < inputs.length; i++) {\n    switch (inputs[i][0]) {\n      case 'forward':\n        horizontalPosition += inputs[i][1];\n        depth += aim * inputs[i][1];\n        break;\n      case 'down':\n        aim += inputs[i][1];\n        break;\n      case 'up':\n        aim -= inputs[i][1];\n        break;\n    }\n  }\n  return (horizontalPosition * depth).toString();\n}\n","import { Box, Code, Heading, HStack, Link } from '@chakra-ui/layout';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  Input,\n  Select,\n  VStack,\n} from '@chakra-ui/react';\nimport { Textarea } from '@chakra-ui/textarea';\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useParams } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { AvailableQuestions } from '../Questions/AvailableQuestions';\nimport { Solvers } from '../Questions/Solvers';\nimport Solver from '../Questions/Solver';\n\nfunction Question() {\n  const params = useParams();\n  let navigate = useNavigate();\n  const [test, setTest] = useState('');\n  const [selectedSolver, setSelectedSolver] = useState(0);\n  const [solvers, setSolvers] = useState<Solver<any>[]>([]);\n  const { t } = useTranslation();\n  const [input, setInput] = useState('');\n  const [output, setOutput] = useState('');\n\n  function onSelectedSolverChange(event: React.ChangeEvent<HTMLSelectElement>) {\n    event.preventDefault();\n    setSelectedSolver(+event.target.value);\n  }\n  function onProblemInputChange(event: React.ChangeEvent<HTMLTextAreaElement>) {\n    event.preventDefault();\n    setInput(event.target.value);\n  }\n  function onClickRun() {\n    setOutput(solvers[selectedSolver].solve(input));\n  }\n  useEffect(() => {\n    if (params.id) {\n      setSolvers(Solvers[params.id]);\n    }\n  }, [params.id]);\n  useEffect(() => {\n    fetch(`questions/question_${params.id}_input.txt`).then((response) => {\n      response.text().then((text) => {\n        setInput(text);\n      });\n    });\n    if (!params.id || !AvailableQuestions.includes(+params.id)) {\n      navigate('/');\n    }\n    fetch(`questions/question_${params.id}_solution.txt`).then((response) => {\n      response.text().then((text) => {\n        setTest(text);\n      });\n    });\n  }, [navigate, params.id]);\n  return (\n    <VStack textAlign=\"left\" alignItems=\"flex-start\" height=\"100%\">\n      <Heading>\n        Question {params.id} -{' '}\n        <Link\n          target=\"_blank\"\n          color=\"teal.500\"\n          href={`https://adventofcode.com/2021/day/${params.id}`}\n        >\n          {t(`questions.${params.id}.title`)}\n        </Link>\n      </Heading>\n      <HStack\n        flex=\"1\"\n        height=\"50%\"\n        alignItems=\"flex-start\"\n        justifyContent=\"flex-start\"\n        spacing=\"32px\"\n      >\n        <Code\n          height=\"100%\"\n          w=\"50vw\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          whiteSpace=\"pre-wrap\"\n          overflow=\"scroll\"\n        >\n          {test}\n        </Code>\n        <Box\n          h=\"100%\"\n          flexGrow=\"1\"\n          borderWidth=\"1px\"\n          borderRadius=\"lg\"\n          padding=\"16px\"\n        >\n          <VStack\n            alignItems=\"center\"\n            justifyContent=\"center\"\n            justifyItems=\"center\"\n            w=\"100%\"\n            h=\"100%\"\n          >\n            <FormControl flexGrow=\"2\" w=\"100%\" h=\"100%\">\n              <VStack w=\"100%\" h=\"100%\" alignItems=\"flex-start\">\n                <FormLabel>Input</FormLabel>\n                <Textarea\n                  height=\"100%\"\n                  value={input}\n                  onChange={onProblemInputChange}\n                />\n                <HStack\n                  width=\"100%\"\n                  alignItems=\"flex-end\"\n                  alignContent=\"flex-end\"\n                  justifyItems=\"flex-end\"\n                  justifyContent=\"flex-end\"\n                >\n                  <Select\n                    value={selectedSolver}\n                    onChange={onSelectedSolverChange}\n                  >\n                    {solvers.map((_solver, index) => {\n                      return (\n                        <option key={index} value={index}>\n                          Solution {index + 1}\n                        </option>\n                      );\n                    })}\n                  </Select>\n                  <Button onClick={onClickRun}>Run</Button>\n                </HStack>\n              </VStack>\n            </FormControl>\n            <FormControl flexGrow=\"1\">\n              <VStack alignItems=\"flex-start\">\n                <FormLabel>Output</FormLabel>\n                <Input placeholder=\"Press run to see result\" value={output} />\n              </VStack>\n            </FormControl>\n          </VStack>\n        </Box>\n      </HStack>\n    </VStack>\n  );\n}\n\nexport default Question;\n","import './App.css';\n\nimport { Container } from '@chakra-ui/react';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Home from './Views/Home';\nimport Question from './Views/Question';\n\nfunction App() {\n  return (\n    <Container h=\"full\" w=\"full\" padding=\"64px\" centerContent>\n      <BrowserRouter>\n        <Routes>\n          <Route index element={<Home />} />\n          <Route path=\"question/:id\" element={<Question />} />\n          <Route path=\"*\" element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n    </Container>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { initReactI18next } from 'react-i18next';\nimport main from './locales/en/main.json';\nimport i18n from 'i18next';\n\nexport const defaultNS = 'main';\nexport const resources = {\n  en: {\n    main,\n  },\n} as const;\n\ni18n.use(initReactI18next).init({\n  lng: 'en',\n  ns: ['main'],\n  fallbackLng: {\n    default: ['en'],\n  },\n  debug: true,\n  defaultNS,\n  resources,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from '@chakra-ui/react';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}